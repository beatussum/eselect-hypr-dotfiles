# Copyright (C) 2024 Mattéo Rossillol‑‑Laruelle <beatussum@protonmail.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.


DESCRIPTION="Manage Hyprland dotfiles"
MAINTAINER="Mattéo Rossillol‑‑Laruelle <beatussum@protonmail.com>"
VERSION=@VERSION@

###############
# DIRECTORIES #
###############

SYS_CONF_DIR="${EROOT%/}/etc"
USER_CONF_DIR="${HOME}/.config"

CONF_DIR="${SYS_CONF_DIR}/eselect/hypr-dotfiles"
DOTFILES_DIR="${CONF_DIR}/dotfiles"

####################
# HELPER FUNCTIONS #
####################

# option parsers #

parse_mode() {
	mode=default

	while [[ $# -ne 0 ]]; do
		case "$1" in
			--force|-f) mode=force ;;
			--skip|-s) mode=skip ;;

			--)
				shift
				break

				;;

			-*) die -q "\`$1\` is not a valid option." ;;
			*) break ;;
		esac

		shift
	done
}

# item management #

get_user_item() {
	local item="$1"

	local item_base="${item#*/}"
	local user_item

	case "${item}" in
		etc/*)
			user_item="${SYS_CONF_DIR}/${item_base}"

			;;
		home/*)
			user_item="${USER_CONF_DIR}/${item_base}"

			;;
	esac

	echo "${user_item}"
}

get_sys_item() {
	local item="$1"
	local target="$2"

	echo "${DOTFILES_DIR}/${target}/${item}"
}

is_set_to() {
	local item="$1"
	local target="$2"

	local user_item="$(get_user_item "${item}")"
	local sys_item="$(get_sys_item "${item}" "${target}")"

	[[ -L "${user_item}" ]] && \
		[[ "$(realpath "${user_item}")" = "${sys_item}" ]]
}

# symlink management #

remove_symlinks() {
	local mode="$1"

	local current="$(get_current_target_name)"
	local conf_dir="${DOTFILES_DIR}/${current}"

	local to_remove=()

	for item in "${conf_dir}"/{etc,home}/*; do
		local item_base="${item#"${conf_dir}/"}"
		local user_item="$(get_user_item "${item_base}")"

		case "${mode}" in
			default)
				if is_set_to "${item_base}" "${current}"; then
					to_remove+=( "${user_item}" )
				else
					write_error_msg ""
					die -q ""
				fi

				;;

			force)
				[[ -e "${user_item}" ]] \
					&& to_remove+=( "${user_item}" )

				;;

			skip)
				is_set_to "${item_base}" "${current}" \
					&& to_remove+=( "${user_item}" )

				;;
		esac
	done

	if [[ ${#to_remove[@]} -ne 0 ]]; then
		rm "${to_remove[@]}" || die -q
	fi
}

set_symlinks() {
	local target="$1"

	local conf_dir="${DOTFILES_DIR}/${target}"

	for item in "${conf_dir}"/{etc,home}/*; do
		local item_base="${item#"${conf_dir}/"}"

		ln -rs \
			"$(get_sys_item "${item_base}" "${target}")" \
			"$(get_user_item "${item_base}")" \
			|| die -q
	done
}

# target management #

find_targets() {
	local dotfiles=()

	for conf in "${DOTFILES_DIR}"/*; do
		dotfiles+=( "$(basename "${conf}")" )
	done

	echo "${dotfiles[@]}"
}

get_current_target_name() {
	local hypr_dir="${USER_CONF_DIR}/hypr"

	if [[ -L "${hypr_dir}" ]]; then
		local target_dir="$(realpath "${hypr_dir}/../..")"
		local current_name="$(basename "${target_dir}")"

		if is_set_to "home/hypr" "${current_name}"; then
			echo "${current_name}"
			return 0
		fi
	fi

	return 1
}

get_current_target() {
	local current_name

	if current_name="$(get_current_target_name)"; then
		local targets=( $(find_targets) )

		for (( i = 0; i != ${#targets[@]}; ++i )); do
			if [[ "${targets[i]}" = "${current_name}" ]]; then
				echo $i
				return 0
			fi
		done
	else
		return 1
	fi
}

get_target_at() {
	local n=$1

	local targets=( $(find_targets) )

	echo "${targets[n]}"
}

# miscellaneous #

write_list_entry() {
	local value="$1"

	write_kv_list_entry "${value}" ""
}

###############
# LIST ACTION #
###############

describe_list() {
	echo "List availabe Hyprland dotfiles"
}

do_list() {
	:
}

##############
# SET ACTION #
##############

describe_set() {
	echo "Set a target as the current Hyprland configuration"
}

describe_set_parameters() {
	echo "<target>"
}

describe_set_options() {
	echo '--force : Set even if the current configuration is not managed by `eselect hypr-dotfiles`'
	echo 'target  : Target name or number (from `list` action)'
}

do_set() {
	:
}

###############
# SHOW ACTION #
###############

describe_show() {
	echo "Show the current Hyprland configuration"
}

do_show() {
	:
}

################
# UNSET ACTION #
################

describe_unset() {
	echo "Unset the current Hyprland configuration"
}

describe_unset_options() {
	echo '--force : Unset even if the current configuration is not managed by `eselect hypr-dotfiles`'
}

do_unset() {
	:
}
